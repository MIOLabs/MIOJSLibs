// Generated by dts-bundle v0.7.3








    declare enum MIOCoreDebugOption {
        Phone = 0,
        Pad = 1,
        Mobile = 2,
        Desktop = 3,
    }
    declare var _MIOCoreDebugOptions: {};
    declare function MIOCoreSetDebugOption(option: any, value: any): void;
    declare enum MIOCoreAppType {
        Web = 0,
        iOS = 1,
        macOS = 2,
        Android = 3,
        WindowsMobile = 4,
        Windows = 5,
        Linux = 6,
    }
    declare function MIOCoreSetAppType(appType: MIOCoreAppType): void;
    declare function MIOCoreGetAppType(): MIOCoreAppType;
    declare function MIOCoreCreateMD5(s: any): string;
    declare function MIOCoreAddLanguage(lang: any, url: any): void;
    declare function MIOCoreGetLanguages(): any;
    declare function MIOCoreSetLanguage(lang: any): void;

    declare interface MIOCoreHTMLParserDelegate {
        parserDidStartElement(parser: MIOCoreHTMLParser, element: any, attributes: any): any;
        parserDidEndElement(parser: MIOCoreHTMLParser, element: any): any;
        parserFoundCharacters(parser: MIOCoreHTMLParser, characters: string): any;
        parserFoundComment(parser: MIOCoreHTMLParser, comment: string): any;
        parserDidStartDocument(parser: MIOCoreHTMLParser): any;
        parserDidEndDocument(parser: MIOCoreHTMLParser): any;
    }
    declare enum MIOCoreHTMLParserTokenType {
        Identifier = 0,
        OpenTag = 1,
        CloseTag = 2,
        OpenCloseTag = 3,
        InlineCloseTag = 4,
        Question = 5,
        Exclamation = 6,
        Equal = 7,
        Quote = 8,
        Commentary = 9,
        End = 10,
    }
    declare class MIOCoreHTMLParser {
        initWithString(string: string, delegate: MIOCoreHTMLParserDelegate): void;
        parse(): void;
    }

    declare enum MIOCoreLexerTokenType {
        Identifier = 0,
        UUIDValue = 1,
        StringValue = 2,
        NumberValue = 3,
        BooleanValue = 4,
        NullValue = 5,
        PropertyValue = 6,
        MinorOrEqualComparator = 7,
        MinorComparator = 8,
        MajorOrEqualComparator = 9,
        MajorComparator = 10,
        EqualComparator = 11,
        DistinctComparator = 12,
        ContainsComparator = 13,
        NotContainsComparator = 14,
        InComparator = 15,
        NotIntComparator = 16,
        OpenParenthesisSymbol = 17,
        CloseParenthesisSymbol = 18,
        Whitespace = 19,
        AND = 20,
        OR = 21,
    }
    declare class MIOCoreLexer {
        constructor(string: string);
        addTokenType(type: any, regex: any): void;
        ignoreTokenType(type: any): void;
        tokenize(): void;
        nextToken(): any;
        prevToken(): any;
    }

    declare function MIOCoreStringHasPreffix(str: any, preffix: any): boolean;
    declare function MIOCoreStringHasSuffix(str: any, suffix: any): boolean;
    declare function MIOCoreStringAppendPathComponent(string: string, path: any): string;
    declare function MIOCoreStringLastPathComponent(string: string): string;
    declare function MIOCoreStringDeletingLastPathComponent(string: string): string;
    declare function MIOCoreStringStandardizingPath(string: any): string;
    declare function MIOLocalizeString(key: any, defaultValue: any): any;
    declare function setMIOLocalizedStrings(data: any): void;
    declare function getMIOLocalizedStrings(): any;

    declare enum MIOCoreBrowserType {
        Safari = 0,
        Chrome = 1,
        IE = 2,
        Edge = 3,
        Other = 4,
    }
    declare function MIOCoreGetBrowser(): MIOCoreBrowserType;
    declare function MIOCoreGetBrowserLocale(): any;
    declare function MIOCoreGetBrowserLanguage(): any;
    declare function MIOCoreGetMainBundleURLString(): string;
    declare function MIOCoreIsPhone(): any;
    declare function MIOCoreIsPad(): any;
    declare function MIOCoreIsMobile(): any;
    declare function MIOCoreLoadScript(url: any): void;
    declare function MIOCoreLoadStyle(url: any, media: any, target?: any, completion?: any): void;
    declare function MIOClassFromString(className: any): any;
    declare function MIOCoreEventRegisterObserverForType(eventType: MIOCoreEventType, observer: any, completion: any): void;
    declare function MIOCoreEventUnregisterObserverForType(eventType: MIOCoreEventType, observer: any): void;

    declare class MIOCoreBundle {
        baseURL: string;
        loadHMTLFromPath(path: any, layerID: any, target: any, completion: any): void;
    }

    declare enum MIOCoreEventKeyCode {
        Enter = 13,
        Escape = 27,
        ArrowLeft = 37,
        ArrowUp = 38,
        ArrowRight = 39,
        ArrowDown = 40,
    }
    declare enum MIOCoreEventType {
        KeyUp = 0,
        KeyDown = 1,
        MouseUp = 2,
        MouseDown = 3,
        TouchStart = 4,
        TouchEnd = 5,
        Click = 6,
        Resize = 7,
    }
    declare class MIOCoreEvent {
        coreEvent: Event;
        eventType: any;
        target: any;
        completion: any;
        initWithType(eventType: MIOCoreEventType, coreEvent: Event): void;
        cancel(): void;
    }
    declare class MIOCoreKeyEvent extends MIOCoreEvent {
        keyCode: any;
        initWithKeyCode(eventType: MIOCoreEventType, eventKeyCode: MIOCoreEventKeyCode, event: Event): void;
    }
    declare class MIOCoreEventInput extends MIOCoreEvent {
        target: any;
        x: number;
        y: number;
        deltaX: number;
        deltaY: number;
    }
    declare enum MIOCoreEventMouseButtonType {
        None = 0,
        Left = 1,
        Right = 2,
        Middle = 3,
    }
    declare class MIOCoreEventMouse extends MIOCoreEventInput {
        button: MIOCoreEventMouseButtonType;
        initWithType(eventType: MIOCoreEventType, coreEvent: MouseEvent): void;
    }
    declare class MIOCoreEventTouch extends MIOCoreEventInput {
        initWithType(eventType: MIOCoreEventType, coreEvent: TouchEvent): void;
    }

    declare enum MIOAttributeType {
        Undefined = 0,
        Boolean = 1,
        Integer = 2,
        Float = 3,
        Number = 4,
        String = 5,
        Date = 6,
    }
    declare class MIOAttributeDescription extends MIOPropertyDescription {
        initWithName(name: string, type: MIOAttributeType, defaultValue: any, optional: boolean, serverName?: string, syncable?: boolean): void;
        readonly attributeType: MIOAttributeType;
        readonly defaultValue: any;
        readonly serverName: string;
        readonly syncable: boolean;
    }

    declare class MIOEntityDescription extends MIOObject {
        name: string;
        attributes: any[];
        attributesByName: {};
        relationships: any[];
        relationshipsByName: {};
        readonly managedObjectClassName: string;
        static entityForNameInManagedObjectContext(entityName: string, context: MIOManagedObjectContext): MIOEntityDescription;
        static insertNewObjectForEntityForName(entityName: string, context: MIOManagedObjectContext): MIOManagedObject;
        initWithEntityName(entityName: string): void;
        readonly properties: MIOPropertyDescription[];
        readonly propertiesByName: {};
        addAttribute(name: string, type: MIOAttributeType, defaultValue: any, optional: boolean, serverName?: string, syncable?: boolean): void;
        serverAttributeName(name: any): any;
        addRelationship(name: string, destinationEntityName: string, toMany: boolean, serverName?: string, inverseName?: string, inverseEntity?: string): void;
        serverRelationshipName(name: any): any;
    }

    declare class MIOManagedObject extends MIOObject {
        init(): void;
        _initWithObjectID(objectID: MIOManagedObjectID, context: MIOManagedObjectContext): void;
        initWithEntityAndInsertIntoManagedObjectContext(entity: MIOEntityDescription, context: MIOManagedObjectContext): void;
        readonly objectID: MIOManagedObjectID;
        readonly entity: MIOEntityDescription;
        readonly managedObjectContext: MIOManagedObjectContext;
        readonly hasChanges: boolean;
        readonly isInserted: boolean;
        _setIsInserted(value: boolean): void;
        readonly isUpdated: boolean;
        _setIsUpdated(value: boolean): void;
        readonly isDeleted: boolean;
        _setIsDeleted(value: boolean): void;
        readonly isFault: boolean;
        _setIsFault(value: boolean): void;
        awakeFromInsert(): void;
        awakeFromFetch(): void;
        _version: number;
        readonly changedValues: {};
        committedValuesForKeys(keys: any): any;
        willSave(): void;
        didSave(): void;
        willTurnIntoFault(): void;
        didTurnIntoFault(): void;
        willAccessValueForKey(key: string): void;
        didAccessValueForKey(key: string): void;
        valueForKey(key: string): any;
        setValueForKey(value: any, key: string): void;
        primitiveValueForKey(key: string): any;
        setPrimitiveValueForKey(value: any, key: string): void;
        _addObjectForKey(object: any, key: string): void;
        _removeObjectForKey(object: any, key: string): void;
        _didCommit(): void;
    }

    declare class MIOPersistentStoreCoordinator extends MIOObject {
        readonly managedObjectModel: MIOManagedObjectModel;
        readonly persistentStores: any[];
        static _storeClasses: {};
        static registerStoreClassForStoreType(storeClass: string, storeType: string): void;
        initWithManagedObjectModel(model: MIOManagedObjectModel): void;
        addPersistentStoreWithType(type: string, configuration: string, url: MIOURL, options: any): MIOPersistentStore;
        removePersistentStore(store: MIOPersistentStore): void;
        managedObjectIDForURIRepresentation(url: MIOURL): MIOManagedObjectID;
        _persistentStoreWithIdentifier(identifier: string): any;
        _persistentStoreForObjectID(objectID: MIOManagedObjectID): MIOPersistentStore;
        _persistentStoreForObject(object: MIOManagedObject): MIOPersistentStore;
    }

    declare class MIOManagedObjectModel extends MIOObject {
        static entityForNameInManagedObjectContext(entityName: any, context: MIOManagedObjectContext): MIOEntityDescription;
        initWithContentsOfURL(url: MIOURL): void;
        connectionDidReceiveText(urlConnection: any, text: any): void;
        parserDidStartElement(parser: MIOXMLParser, element: string, attributes: any): void;
        parserDidEndElement(parser: MIOXMLParser, element: string): void;
        parserDidEndDocument(parser: MIOXMLParser): void;
        setEntitiesForConfiguration(entities: any, configuration: string): void;
        entitiesForConfiguration(configurationName: string): any;
        readonly entitiesByName: {};
    }

    declare let MIOManagedObjectContextWillSaveNotification: string;
    declare let MIOManagedObjectContextDidSaveNotification: string;
    declare let MIOManagedObjectContextObjectsDidChange: string;
    declare let MIOInsertedObjectsKey: string;
    declare let MIOUpdatedObjectsKey: string;
    declare let MIODeletedObjectsKey: string;
    declare let MIORefreshedObjectsKey: string;
    declare enum MIOManagedObjectContextConcurrencyType {
        PrivateQueue = 0,
        MainQueue = 1,
    }
    declare enum NSMergePolicy {
        None = 0,
    }
    declare class MIOManagedObjectContext extends MIOObject {
        persistentStoreCoordinator: MIOPersistentStoreCoordinator;
        concurrencyType: MIOManagedObjectContextConcurrencyType;
        mergePolicy: string;
        initWithConcurrencyType(type: MIOManagedObjectContextConcurrencyType): void;
        parent: MIOManagedObjectContext;
        insertObject(object: MIOManagedObject): void;
        updateObject(object: MIOManagedObject): void;
        deleteObject(object: MIOManagedObject): void;
        _objectWithURIRepresentationString(urlString: string): any;
        objectWithID(objectID: MIOManagedObjectID): MIOManagedObject;
        existingObjectWithID(objectID: MIOManagedObjectID): MIOManagedObject;
        refreshObject(object: MIOManagedObject, mergeChanges: boolean): void;
        removeAllObjectsForEntityName(entityName: any): void;
        executeFetch(request: any): any;
        _obtainPermanentIDForObject(object: MIOManagedObject): void;
        save(): void;
        mergeChangesFromContextDidSaveNotification(notification: MIONotification): void;
        performBlockAndWait(target: any, block: any): void;
    }

    declare enum MIOFetchRequestResultType {
        MIOManagedObject = 0,
        MIOManagedObjectID = 1,
        Dictionary = 2,
        Count = 3,
    }
    declare class MIOFetchRequest extends MIOPersistentStoreRequest {
        entityName: string;
        entity: MIOEntityDescription;
        predicate: MIOPredicate;
        sortDescriptors: any;
        resultType: MIOFetchRequestResultType;
        fetchLimit: number;
        fetchOffset: number;
        relationshipKeyPathsForPrefetching: any[];
        static fetchRequestWithEntityName(entityName: string): MIOFetchRequest;
        initWithEntityName(entityName: string): void;
    }

    declare class MIOSaveChangesRequest extends MIOPersistentStoreRequest {
        insertedObjects: any[];
        updatedObjects: any[];
        deletedObjects: any[];
        initWithObjects(inserted: any, updated: any, deleted: any): void;
    }

    declare let MIOStoreUUIDKey: string;
    declare let MIOStoreTypeKey: string;
    declare class MIOPersistentStore extends MIOObject {
        static readonly type: string;
        readonly persistentStoreCoordinator: MIOPersistentStoreCoordinator;
        readonly configurationName: string;
        readonly url: MIOURL;
        readonly options: any;
        readonly readOnly: boolean;
        readonly type: string;
        readonly identifier: string;
        protected metadata: any;
        initWithPersistentStoreCoordinator(root: MIOPersistentStoreCoordinator, configurationName: string, url: MIOURL, options?: any): void;
        didAddToPersistentStoreCoordinator(psc: MIOPersistentStoreCoordinator): void;
        willRemoveFromPersistentStoreCoordinator(psc: MIOPersistentStoreCoordinator): void;
        loadMetadata(): void;
        _obtainPermanentIDForObject(object: MIOManagedObject): MIOManagedObjectID;
        _executeRequest(request: MIOPersistentStoreRequest, context: MIOManagedObjectContext): any[];
        _objectIDForEntity(entity: MIOEntityDescription, referenceObject: string): any;
    }

    declare class MIOInMemoryStore extends MIOPersistentStore {
    }

    declare class MIOIncrementalStore extends MIOPersistentStore {
        newObjectIDForEntity(entity: MIOEntityDescription, referenceObject: string): MIOManagedObjectID;
        referenceObjectForObjectID(objectID: MIOManagedObjectID): any;
        executeRequest(request: MIOPersistentStoreRequest, context: MIOManagedObjectContext): any[];
        newValuesForObjectWithID(objectID: MIOManagedObjectID, context: MIOManagedObjectContext): MIOIncrementalStoreNode;
        newValueForRelationship(relationship: MIORelationshipDescription, objectID: MIOManagedObjectID, context?: MIOManagedObjectContext): any;
        obtainPermanentIDsForObjects(objects: any): any[];
        managedObjectContextDidRegisterObjectsWithIDs(objectIDs: any): void;
        managedObjectContextDidUnregisterObjectsWithIDs(objectIDs: any): void;
        _executeRequest(request: MIOPersistentStoreRequest, context: MIOManagedObjectContext): any[];
        _obtainPermanentIDForObject(object: MIOManagedObject): any;
        _nodeForObjectID(objectID: MIOManagedObjectID, context: MIOManagedObjectContext): MIOIncrementalStoreNode;
        _objectIDForEntity(entity: MIOEntityDescription, referenceObject: string): MIOManagedObjectID;
        _fetchObjectWithObjectID(objectID: MIOManagedObjectID, context: MIOManagedObjectContext): void;
    }

    declare class MIOFetchSection extends MIOObject {
        objects: any[];
        numberOfObjects(): number;
    }
    declare class MIOFetchedResultsController extends MIOObject {
        sections: any[];
        resultObjects: any[];
        fetchRequest: MIOFetchRequest;
        managedObjectContext: MIOManagedObjectContext;
        sectionNameKeyPath: any;
        initWithFetchRequest(request: any, managedObjectContext: any, sectionNameKeyPath?: any): void;
        delegate: any;
        performFetch(): any[];
        objectAtIndexPath(indexPath: MIOIndexPath): any;
    }

    declare class _MIOIncrementalStoreNodeDateTransformer {
        static sdf: MIOISO8601DateFormatter;
    }
    declare class MIOIncrementalStoreNode extends MIOObject {
        readonly objectID: MIOManagedObjectID;
        readonly version: number;
        initWithObjectID(objectID: MIOManagedObjectID, values: any, version: any): void;
        updateWithValues(values: any, version: any): void;
        valueForPropertyDescription(property: MIOPropertyDescription): any;
    }

    declare class MIOManagedObjectID extends MIOObject {
        readonly entity: MIOEntityDescription;
        readonly isTemporaryID: boolean;
        readonly persistentStore: MIOPersistentStore;
        readonly URIRepresentation: MIOURL;
        static _objectIDWithEntity(entity: MIOEntityDescription, referenceObject?: string): MIOManagedObjectID;
        static _objectIDWithURIRepresentation(url: MIOURL): MIOManagedObjectID;
        _initWithEntity(entity: MIOEntityDescription, referenceObject?: string): void;
        _initWithURIRepresentation(url: MIOURL): void;
        _getStoreIdentifier(): string;
        _setStoreIdentifier(identifier: string): void;
        _setPersistentStore(persistentStore: MIOPersistentStore): void;
        _getReferenceObject(): any;
        _setReferenceObject(object: any): void;
    }

    declare class MIOManagedObjectSet extends MIOObject {
        static _setWithManagedObject(object: MIOManagedObject, relationship: MIORelationshipDescription): MIOManagedObjectSet;
        init(): void;
        _initWithManagedObject(object: MIOManagedObject, relationship: MIORelationshipDescription): void;
        _addObjectID(objectID: MIOManagedObjectID): void;
        addObject(object: MIOManagedObject): void;
        _removeObject(objectID: MIOManagedObjectID): void;
        removeObject(object: MIOManagedObject): void;
        removeAllObjects(): void;
        indexOfObject(object: MIOManagedObject): any;
        containsObject(object: MIOManagedObject): boolean;
        objectAtIndex(index: any): any;
        readonly allObjects: any;
        readonly count: number;
        readonly length: number;
        filterWithPredicate(predicate: MIOPredicate): any;
        addObserver(obs: any, keypath: string, context?: any): void;
        _reset(): void;
    }

    declare class MIOMergePolicy extends MIOObject {
    }

    declare enum MIORequestType {
        Fetch = 0,
        Save = 1,
    }
    declare class MIOPersistentStoreRequest extends MIOObject {
        requestType: MIORequestType;
    }

    declare class MIOPropertyDescription extends MIOObject {
        entity: MIOEntityDescription;
        name: string;
        optional: boolean;
    }

    declare enum MIODeleteRule {
        noActionDeleteRule = 0,
        nullifyDeleteRule = 1,
        cascadeDeleteRule = 2,
        denyDeleteRule = 3,
    }
    declare class MIORelationshipDescription extends MIOPropertyDescription {
        destinationEntityName: string;
        destinationEntity: MIOEntityDescription;
        inverseRelationship: MIORelationshipDescription;
        isToMany: boolean;
        deleteRule: MIODeleteRule;
        initWithName(name: string, destinationEntityName: string, isToMany: boolean, serverName?: string, inverseName?: string, inverseEntity?: string): void;
        readonly serverName: string;
    }

    declare class MIOPoint {
        x: number;
        y: number;
        static Zero(): MIOPoint;
        constructor(x: any, y: any);
    }

    declare class MIORange {
        location: number;
        length: number;
        constructor(location: any, length: any);
    }
    declare function MIOMaxRange(range: MIORange): number;
    declare function MIOEqualRanges(range1: MIORange, range2: MIORange): boolean;
    declare function MIOLocationInRange(location: number, range: MIORange): boolean;
    declare function MIOIntersectionRange(range1: MIORange, range2: MIORange): MIORange;
    declare function MIOUnionRange(range1: MIORange, range2: MIORange): MIORange;

    declare class MIORect {
        origin: MIOPoint;
        size: MIOSize;
        static Zero(): MIORect;
        static rectWithValues(x: any, y: any, w: any, h: any): MIORect;
        constructor(p: any, s: any);
    }

    declare class MIOSize {
        width: number;
        height: number;
        static Zero(): MIOSize;
        constructor(w: any, h: any);
        isEqualTo(size: any): boolean;
    }

    declare class MIOObject {
        className: string;
        keyPaths: {};
        init(): void;
        willChangeValueForKey(key: string): void;
        didChangeValueForKey(key: string): void;
        willChangeValue(key: string): void;
        didChangeValue(key: string): void;
        addObserver(obs: any, keypath: string, context?: any): void;
        removeObserver(obs: any, keypath: string): void;
        setValueForKey(value: any, key: string): void;
        valueForKey(key: string): any;
        valueForKeyPath(keyPath: string): any;
        copy(): any;
    }

    declare class MIONull extends MIOObject {
        static nullValue(): MIONull;
    }

    declare class MIOError extends MIOObject {
        errorCode: number;
    }

    declare class MIODecimalNumber extends MIONumber {
        static decimalNumberWithString(str: string): MIODecimalNumber;
        static one(): MIODecimalNumber;
        static zero(): MIODecimalNumber;
        static numberWithBool(value: any): MIODecimalNumber;
        static numberWithInteger(value: any): MIODecimalNumber;
        static numberWithFloat(value: any): MIODecimalNumber;
        initWithString(str: string): void;
        initWithDecimal(value: any): void;
        _initWithValue(value: any): void;
        decimalNumberByAdding(value: MIODecimalNumber): MIODecimalNumber;
        decimalNumberBySubtracting(value: MIODecimalNumber): MIODecimalNumber;
        decimalNumberByMultiplyingBy(value: MIODecimalNumber): MIODecimalNumber;
        decimalNumberByDividingBy(value: MIODecimalNumber): MIODecimalNumber;
        readonly decimalValue: any;
        readonly floatValue: any;
    }

    declare enum MIODateFirstWeekDay {
        Sunday = 0,
        Monday = 1,
    }
    declare function MIODateSetFirstWeekDay(day: MIODateFirstWeekDay): void;
    declare function MIODateGetStringForMonth(month: any): string;
    declare function MIODateGetStringForDay(day: number): string;
    declare function MIODateGetDayFromDate(date: any): any;
    declare function MIODateGetDayStringFromDate(date: any): string;
    declare function MIODateGetString(date: any): string;
    declare function MIODateGetDateString(date: any): string;
    declare function MIODateGetTimeString(date: any): string;
    declare function MIODateGetUTCString(date: any): string;
    declare function MIODateGetUTCDateString(date: any): string;
    declare function MIODateGetUTCTimeString(date: any): string;
    declare function MIODateFromString(string: any): Date;
    declare function MIODateToUTC(date: any): Date;
    declare function MIODateAddDaysToDateString(dateString: any, days: any): string;
    declare function MIODateRemoveDaysToDateString(dateString: any, days: any): string;
    declare function MIODateFromMiliseconds(miliseconds: any): Date;
    declare function isDate(x: any): boolean;
    declare function MIODateToday(): Date;
    declare function MIODateNow(): Date;
    declare function MIODateTodayString(): string;
    declare function MIODateYesterday(): Date;
    declare function MIODateTomorrow(): Date;
    declare function MIODateGetFirstDayOfTheWeek(date: Date): Date;
    declare function MIODateGetLastDayOfTheWeek(date: Date): Date;

    declare class MIOUUID {
        constructor();
        static uuid(): string;
    }

    declare enum MIOPredicateComparatorType {
        Equal = 0,
        Less = 1,
        LessOrEqual = 2,
        Greater = 3,
        GreaterOrEqual = 4,
        Distinct = 5,
        Contains = 6,
        NotContains = 7,
        In = 8,
        NotIn = 9,
    }
    declare enum MIOPredicateOperatorType {
        OR = 0,
        AND = 1,
    }
    declare enum MIOPredicateType {
        Predicate = 0,
        Item = 1,
        Operation = 2,
    }
    declare class MIOPredicateOperator {
        type: any;
        static andPredicateOperatorType(): MIOPredicateOperator;
        static orPredicateOperatorType(): MIOPredicateOperator;
        constructor(type: any);
    }
    declare enum MIOPredicateItemValueType {
        Undefined = 0,
        UUID = 1,
        String = 2,
        Number = 3,
        Boolean = 4,
        Null = 5,
        Property = 6,
    }
    declare class MIOPredicateItem {
        key: any;
        comparator: any;
        value: any;
        valueType: MIOPredicateItemValueType;
        evaluateObject(object: MIOObject): boolean;
    }
    declare class MIOPredicateGroup {
        predicates: any[];
        evaluateObject(object: any): boolean;
    }
    declare enum MIOPredicateTokenType {
        Identifier = 0,
        UUIDValue = 1,
        StringValue = 2,
        NumberValue = 3,
        BooleanValue = 4,
        NullValue = 5,
        PropertyValue = 6,
        MinorOrEqualComparator = 7,
        MinorComparator = 8,
        MajorOrEqualComparator = 9,
        MajorComparator = 10,
        EqualComparator = 11,
        DistinctComparator = 12,
        ContainsComparator = 13,
        NotContainsComparator = 14,
        InComparator = 15,
        NotIntComparator = 16,
        OpenParenthesisSymbol = 17,
        CloseParenthesisSymbol = 18,
        Whitespace = 19,
        AND = 20,
        OR = 21,
    }
    declare class MIOPredicate extends MIOObject {
        predicateGroup: any;
        static predicateWithFormat(format: any): MIOPredicate;
        initWithFormat(format: any): void;
        evaluateObject(object: MIOObject): any;
    }
    declare function _MIOPredicateFilterObjects(objs: any, predicate: any): any;

    declare class MIOSet extends MIOObject {
        static set(): MIOSet;
        addObject(object: any): void;
        removeObject(object: any): void;
        removeAllObjects(): void;
        indexOfObject(object: any): number;
        containsObject(object: any): boolean;
        objectAtIndex(index: any): any;
        readonly allObjects: any[];
        readonly count: number;
        readonly length: number;
        copy(): MIOSet;
        filterWithPredicate(predicate: MIOPredicate): any;
        addObserver(obs: any, keypath: string, context?: any): void;
    }

    declare function MIOIndexPathEqual(indexPath1: MIOIndexPath, indexPath2: MIOIndexPath): boolean;
    declare class MIOIndexPath extends MIOObject {
        static indexForRowInSection(row: number, section: number): MIOIndexPath;
        static indexForColumnInRowAndSection(column: number, row: number, section: number): MIOIndexPath;
        add(value: number): void;
        readonly section: any;
        readonly row: any;
        readonly column: any;
    }

    declare class MIOLocale extends MIOObject {
        languageIdentifier: string;
        countryIdentifier: string;
        static currentLocale(): any;
        initWithLocaleIdentifier(identifer: string): void;
        readonly decimalSeparator: string;
        readonly currencySymbol: string;
        readonly groupingSeparator: string;
    }

    declare class MIOFormatter extends MIOObject {
        stringForObjectValue(value: any): any;
        getObjectValueForString(str: string): void;
        editingStringForObjectValue(value: any): void;
        isPartialStringValid(str: string): [boolean, string];
    }

    declare enum MIODateFormatterStyle {
        NoStyle = 0,
        ShortStyle = 1,
        MediumStyle = 2,
        LongStyle = 3,
        FullStyle = 4,
    }
    declare class MIODateFormatter extends MIOFormatter {
        dateStyle: MIODateFormatterStyle;
        timeStyle: MIODateFormatterStyle;
        init(): void;
        dateFromString(str: string): Date;
        stringFromDate(date: Date): string;
        stringForObjectValue(value: any): string;
        isPartialStringValid(str: string): [boolean, string];
        protected iso8601DateStyle(date: Date): string;
        protected iso8601TimeStyle(date: Date): string;
    }

    declare class MIOISO8601DateFormatter extends MIODateFormatter {
        static iso8601DateFormatter(): MIOISO8601DateFormatter;
        timeZone: any;
        dateFromString(str: string): Date;
        stringFromDate(date: Date): string;
    }

    declare enum MIONumberFormatterStyle {
        NoStyle = 0,
        DecimalStyle = 1,
        CurrencyStyle = 2,
        PercentStyle = 3,
    }
    declare enum _MIONumberFormatterType {
        Int = 0,
        Decimal = 1,
    }
    declare class MIONumberFormatter extends MIOFormatter {
        numberStyle: MIONumberFormatterStyle;
        locale: any;
        minimumFractionDigits: number;
        maximumFractionDigits: number;
        groupingSeparator: any;
        init(): void;
        numberFromString(str: string): any;
        stringFromNumber(number: number): string;
        stringForObjectValue(value: any): string;
        isPartialStringValid(str: string): [boolean, string];
    }

    declare class MIOTimer extends MIOObject {
        static scheduledTimerWithTimeInterval(timeInterval: any, repeat: any, target: any, completion: any): MIOTimer;
        initWithTimeInterval(timeInterval: any, repeat: any, target: any, completion: any): void;
        fire(): void;
        invalidate(): void;
    }

    declare class MIONotification {
        name: any;
        object: any;
        userInfo: any;
        constructor(name: any, object: any, userInfo: any);
    }
    declare class MIONotificationCenter {
        notificationNames: {};
        constructor();
        static defaultCenter(): MIONotificationCenter;
        addObserver(obs: any, name: any, fn: any): void;
        removeObserver(obs: any, name: any): void;
        postNotification(name: any, object: any, userInfo?: any): void;
    }

    declare class MIOUserDefaults {
        constructor();
        static standardUserDefaults(): MIOUserDefaults;
        setBooleanForKey(key: any, value: boolean): void;
        booleanForKey(key: any): boolean;
        setValueForKey(key: any, value: any): void;
        valueForKey(key: any): string;
        removeValueForKey(key: any): void;
    }

    declare enum MIOURLTokenType {
        Protocol = 0,
        Host = 1,
        Path = 2,
        Param = 3,
        Value = 4,
    }
    declare class MIOURL extends MIOObject {
        baseURL: MIOURL;
        absoluteString: string;
        scheme: string;
        user: string;
        password: any;
        host: string;
        port: number;
        hostname: string;
        path: string;
        file: string;
        pathExtension: string;
        params: any[];
        static urlWithString(urlString: string): MIOURL;
        initWithScheme(scheme: string, host: string, path: string): void;
        initWithURLString(urlString: string): void;
        urlByAppendingPathComponent(path: string): MIOURL;
        standardizedURL(): MIOURL;
    }

    declare class MIOURLRequest extends MIOObject {
        url: MIOURL;
        httpMethod: string;
        httpBody: any;
        headers: any[];
        binary: boolean;
        download: boolean;
        static requestWithURL(url: MIOURL): MIOURLRequest;
        initWithURL(url: MIOURL): void;
        setHeaderField(field: any, value: any): void;
    }

    declare class MIOURLConnection {
        request: MIOURLRequest;
        delegate: any;
        blockFN: any;
        blockTarget: any;
        initWithRequest(request: MIOURLRequest, delegate: any): void;
        initWithRequestBlock(request: MIOURLRequest, blockTarget: any, blockFN: any): void;
        start(): void;
    }

    declare interface MIOXMLParserDelegate {
        parserDidStartDocument?(parser: MIOXMLParser): any;
        parserDidEndDocument?(parser: MIOXMLParser): any;
        parserDidStartElement?(parser: MIOXMLParser, element: string, attributes: any): any;
        parserDidEndElement?(parser: MIOXMLParser, element: string): any;
        parserFoundCharacters?(parser: MIOXMLParser, characters: string): any;
        parserFoundComment?(parser: MIOXMLParser, comment: string): any;
    }
    declare enum MIOXMLTokenType {
        Identifier = 0,
        QuestionMark = 1,
        ExclamationMark = 2,
        OpenTag = 3,
        CloseTag = 4,
        Slash = 5,
        Quote = 6,
        End = 7,
    }
    declare class MIOXMLParser extends MIOObject {
        initWithString(str: string, delegate: MIOXMLParserDelegate): void;
        parse(): void;
    }

    declare class MIOOperation extends MIOObject {
        name: string;
        target: any;
        completion: any;
        readonly dependencies: any[];
        readonly isExecuting: boolean;
        readonly isFinished: boolean;
        readonly ready: boolean;
        addDependency(operation: MIOOperation): void;
        main(): void;
        start(): void;
        executing(): boolean;
        finished(): boolean;
        observeValueForKeyPath(keyPath: string, type: string, object: any, ctx: any): void;
    }

    declare class MIOOperationQueue extends MIOObject {
        addOperation(operation: MIOOperation): void;
        removeOperation(operation: MIOOperation): void;
        readonly operations: any[];
        readonly operationCount: () => any;
        suspended: boolean;
        observeValueForKeyPath(keyPath: string, type: string, object: any, ctx: any): void;
    }

    declare class MIOBundle extends MIOObject {
        url: MIOURL;
        static mainBundle(): MIOBundle;
        initWithURL(url: MIOURL): void;
        loadHTMLNamed(path: any, layerID: any, target?: any, completion?: any): void;
    }

    declare function MIOLog(format: any): void;

    declare enum MIOLibInitType {
        Release = 0,
        Debug = 1,
    }
    declare function MIOLibInit(mainFn: any, type?: MIOLibInitType): void;
    declare function MIOLibDownloadScript(url: any, target: any, completion: any): void;
    declare function MIOLibLoadStyle(url: any): void;
    declare function MIOLibLoadScript(url: any, callback: any): void;
    declare function MIOLibLoadScriptCallback(): void;
    declare function MIOLibDownloadNextFile(): void;
    declare function MIOLibOnLoaded(target: any, completion: any): void;
    declare function MIOLibDownloadLibFile(file: any): void;
    declare function MIOLibDownloadFile(file: any): void;
    declare function MIOLibIsRetina(): boolean;
    declare function MIOLibDecodeParams(string: any, target?: any, completion?: any): void;
    declare function MIOLibEvaluateParam(param: any, value: any, target: any, completion: any): void;
    declare function _MIOLibDownloadLibFiles(): void;

    declare class MIONumber extends MIOObject {
        static numberWithBool(value: any): MIONumber;
        static numberWithInteger(value: any): MIONumber;
        static numberWithFloat(value: any): MIONumber;
        protected storeValue: any;
        initWithBool(value: any): void;
        initWithInteger(value: any): void;
        initWithFloat(value: any): void;
    }

    declare class MIOSortDescriptor extends MIOObject {
        key: any;
        ascending: boolean;
        static sortDescriptorWithKey(key: any, ascending: any): MIOSortDescriptor;
        initWithKey(key: any, ascending: any): void;
    }
    declare function _MIOSortDescriptorSortObjects(objs: any, sortDescriptors: any): any;

    declare function MUILayerSearchElementByID(layer: any, elementID: any): any;
    declare function MUILayerGetFirstElementWithTag(layer: any, tag: any): any;
    declare class MUIView extends MIOObject {
        layerID: any;
        layer: any;
        layerOptions: any;
        hidden: boolean;
        alpha: number;
        parent: any;
        tag: any;
        protected _viewIsVisible: boolean;
        protected _needDisplay: boolean;
        _isLayerInDOM: boolean;
        protected _subviews: any[];
        readonly subviews: any[];
        _window: MUIWindow;
        _outlets: {};
        constructor(layerID?: any);
        init(): void;
        initWithFrame(frame: any): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        copy(): any;
        awakeFromHTML(): void;
        setParent(view: any): void;
        addSubLayer(layer: any): void;
        _linkViewToSubview(view: any): void;
        addSubview(view: any, index?: any): void;
        protected _addLayerToDOM(index?: any): void;
        removeFromSuperview(): void;
        protected _removeLayerFromDOM(): void;
        setViewIsVisible(value: boolean): void;
        layoutSubviews(): void;
        setNeedsDisplay(): void;
        layerWithItemID(itemID: any): any;
        setHidden(hidden: any): void;
        setBackgroundColor(color: any): void;
        setBackgroundRGBColor(r: any, g: any, b: any, a?: any): void;
        getBackgroundColor(): string;
        setAlpha(alpha: any, animate?: any, duration?: any): void;
        setX(x: any, animate?: any, duration?: any): void;
        getX(): number;
        setY(y: any): void;
        getY(): number;
        setWidth(w: any): void;
        getWidth(): number;
        setHeight(h: any): void;
        getHeight(): number;
        setFrameComponents(x: any, y: any, w: any, h: any): void;
        setFrame(frame: any): void;
        readonly frame: MIORect;
        readonly bounds: MIORect;
        protected _getValueFromCSSProperty(property: any): string;
        protected _getIntValueFromCSSProperty(property: any): number;
    }

    declare class MUIWindow extends MUIView {
        rootViewController: MUIViewController;
        initWithRootViewController(vc: any): void;
        makeKey(): void;
        makeKeyAndVisible(): void;
        layoutSubviews(): void;
        addSubview(view: MUIView): void;
        protected _addLayerToDOM(): void;
        removeFromSuperview(): void;
        protected _removeLayerFromDOM(): void;
        setHidden(hidden: any): void;
        _eventHappendOutsideWindow(): void;
        _becameKeyWindow(): void;
        _resignKeyWindow(): void;
    }

    declare class MUITabBarItem extends MUIButton {
    }
    declare class MUITabBar extends MUIView {
        items: any[];
        selectedTabBarItemIndex: number;
        initWithLayer(layer: any, owner: any, options?: any): void;
        addTabBarItem(item: any): void;
        selectTabBarItem(item: any): void;
        selectTabBarItemAtIndex(index: any): void;
        layout(): void;
    }

    declare class MUIImageView extends MUIView {
        initWithLayer(layer: any, owner: any, options?: any): void;
        setImage(imageURL: any): void;
    }

    declare class MUILabel extends MUIView {
        autoAdjustFontSize: string;
        autoAdjustFontSizeValue: number;
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setText(text: any): void;
        text: any;
        setTextAlignment(alignment: any): void;
        setHightlighted(value: any): void;
        setTextRGBColor(r: any, g: any, b: any): void;
        setFontSize(size: any): void;
        setFontStyle(style: any): void;
        setFontFamily(fontFamily: any): void;
    }

    declare enum MUITextFieldType {
        NormalType = 0,
        PasswordType = 1,
        SearchType = 2,
    }
    declare class MUITextField extends MUIControl {
        placeHolder: any;
        type: MUITextFieldType;
        textChangeTarget: any;
        textChangeAction: any;
        enterPressTarget: any;
        enterPressAction: any;
        keyPressTarget: any;
        keyPressAction: any;
        formatter: MIOFormatter;
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        layoutSubviews(): void;
        setText(text: any): void;
        text: any;
        setPlaceholderText(text: any): void;
        setOnChangeText(target: any, action: any): void;
        setOnEnterPress(target: any, action: any): void;
        setOnKeyPress(target: any, action: any): void;
        setOnDidEditing(target: any, action: any): void;
        setTextRGBColor(r: any, g: any, b: any): void;
        textColor: string;
        becomeFirstResponder(): void;
    }

    declare class MUITextArea extends MUIControl {
        textareaLayer: any;
        textChangeTarget: any;
        textChangeAction: any;
        initWithLayer(layer: any, owner: any, options?: any): void;
        text: any;
        setText(text: any): void;
        getText(): any;
        setEditMode(value: any): void;
        setOnChangeText(target: any, action: any): void;
    }

    declare class MUIScrollView extends MUIView {
        pagingEnabled: boolean;
        delegate: any;
        scrolling: boolean;
        showsVerticalScrollIndicator: boolean;
        scrollEnable: boolean;
        protected contentView: any;
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        protected didStartScroll(): void;
        protected didScroll(deltaX: any, deltaY: any): void;
        protected didStopScroll(): void;
        setScrollEnable(value: boolean): void;
        setShowsVerticalScrollIndicator(value: boolean): void;
        contentOffset: MIOPoint;
        readonly bounds: MIORect;
        addSubview(view: MUIView, index?: any): void;
        contentSize: MIOSize;
        layoutSubviews(): void;
        scrollToTop(animate?: any): void;
        scrollToBottom(animate?: any): void;
        scrollToPoint(x: any, y: any, animate?: any): void;
        scrollRectToVisible(rect: any, animate?: any): void;
    }

    declare interface MUITableViewDataSource {
        viewForHeaderInSection?(tableView: MUITableView, section: any): MUIView;
        titleForHeaderInSection?(tableView: MUITableView, section: any): string;
    }
    declare class MUITableViewSection extends MIOObject {
        header: MUIView;
        title: string;
        rows: number;
        cells: any[];
        static headerWithTitle(title: any, height: any): MUIView;
    }
    declare enum MUITableViewRowType {
        Header = 0,
        SectionHeader = 1,
        Cell = 2,
        SectionFooter = 3,
        Footer = 4,
    }
    declare class MUITableViewRow extends MIOObject {
        type: MUITableViewRowType;
        view: MUIView;
        height: number;
        initWithType(type: MUITableViewRowType): void;
    }
    declare class MUITableViewCellNode extends MIOObject {
        identifier: string;
        section: MUITableViewSection;
    }
    declare class MUITableView extends MUIScrollView {
        dataSource: any;
        delegate: any;
        headerView: MUIView;
        footerView: MUIView;
        headerHeight: number;
        footerHeight: number;
        sectionHeaderHeight: number;
        sectionFooterHeight: number;
        rowHeight: number;
        allowsMultipleSelection: boolean;
        initWithLayer(layer: any, owner: any, options?: any): void;
        addCellPrototypeWithIdentifier(identifier: any, elementID: any, url: any, classname?: any): void;
        dequeueReusableCellWithIdentifier(identifier: any): MUITableViewCell;
        setHeaderView(view: any): void;
        reloadData(): void;
        layoutSubviews(): void;
        cellOnClickFn(cell: MUITableViewCell): void;
        cellOnDblClickFn(cell: any): void;
        cellOnAccessoryClickFn(cell: any): void;
        cellAtIndexPath(indexPath: MIOIndexPath): any;
        indexPathForCell(cell: MUITableViewCell): MIOIndexPath;
        _selectCell(cell: any): void;
        selectCellAtIndexPath(indexPath: MIOIndexPath): void;
        _deselectCell(cell: any): void;
        deselectCellAtIndexPath(indexPath: MIOIndexPath): void;
        selectNextIndexPath(): void;
        selectPrevIndexPath(): void;
    }

    declare enum MUITableViewCellStyle {
        Custom = 0,
        Default = 1,
    }
    declare enum MUITableViewCellAccessoryType {
        None = 0,
        DisclosureIndicator = 1,
        DetailDisclosureButton = 2,
        Checkmark = 3,
    }
    declare enum MIOTableViewCellEditingStyle {
        None = 0,
        Delete = 1,
        Insert = 2,
    }
    declare enum MUITableViewCellSeparatorStyle {
        None = 0,
        SingleLine = 1,
        SingleLineEtched = 2,
    }
    declare enum MUITableViewCellSelectionStyle {
        None = 0,
        Default = 1,
    }
    declare class MUITableViewCell extends MUIView {
        reuseIdentifier: string;
        nodeID: string;
        contentView: MUIView;
        style: MUITableViewCellStyle;
        textLabel: any;
        accessoryType: MUITableViewCellAccessoryType;
        accessoryView: any;
        separatorStyle: MUITableViewCellSeparatorStyle;
        selectionStyle: MUITableViewCellSelectionStyle;
        editingAccessoryType: MUITableViewCellAccessoryType;
        editingAccesoryView: MUIView;
        _target: any;
        _onClickFn: any;
        _onDblClickFn: any;
        _onAccessoryClickFn: any;
        initWithStyle(style: MUITableViewCellStyle): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setAccessoryType(type: any): void;
        setPaddingIndex(value: any): void;
        setHeight(h: any): void;
        setSelected(value: any): void;
        selected: boolean;
        _setHightlightedSubviews(value: any): void;
        setEditing(editing: any, animated?: any): void;
        editing: boolean;
        readonly isEditing: boolean;
    }

    declare class MUICollectionViewCell extends MUIView {
        _target: any;
        _onClickFn: any;
        _index: any;
        _section: any;
        selected: boolean;
        initWithLayer(layer: any, owner: any, options: any): void;
        setSelected(value: any): void;
    }
    declare class MUICollectionViewSection extends MIOObject {
        header: any;
        footer: any;
        cells: any[];
    }
    declare class MUICollectionView extends MUIView {
        dataSource: any;
        delegate: any;
        selectedCellIndex: number;
        selectedCellSection: number;
        collectionViewLayout: MUICollectionViewFlowLayout;
        initWithLayer(layer: any, options: any): void;
        registerClassForCellWithReuseIdentifier(cellClass: any, resource: any, identifier: any): void;
        registerClassForSupplementaryViewWithReuseIdentifier(viewClass: any, resource: any, identifier: any): void;
        dequeueReusableCellWithIdentifier(identifier: any): any;
        dequeueReusableSupplementaryViewWithReuseIdentifier(identifier: any): any;
        cellAtIndexPath(indexPath: MIOIndexPath): any;
        reloadData(): void;
        cellOnClickFn(cell: any): void;
        _selectCell(cell: any): void;
        selectCellAtIndexPath(index: any, section: any): void;
        _deselectCell(cell: any): void;
        deselectCellAtIndexPath(indexPath: MIOIndexPath): void;
        layoutSubviews(): void;
    }

    declare class MUICollectionViewLayout extends MIOObject {
        collectionView: MUICollectionView;
        minimumLineSpacing: number;
        minimumInteritemSpacing: number;
        itemSize: MIOSize;
        estimatedItemSize: MIOSize;
        sectionInset: MUIEdgeInsets;
        headerReferenceSize: MIOSize;
        footerReferenceSize: MIOSize;
        init(): void;
        invalidateLayout(): void;
    }
    declare class MUICollectionViewFlowLayout extends MUICollectionViewLayout {
        init(): void;
    }

    declare class MUIWebView extends MUIView {
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setURL(url: any): void;
        setHTML(html: any): void;
    }

    declare class MUIControl extends MUIView {
        enabled: boolean;
        mouseOverTarget: any;
        mouseOverAction: any;
        mouseOutTarget: any;
        mouseOutAction: any;
        setEnabled(enabled: any): void;
        setOnMouseOverAction(target: any, action: any): void;
        setOnMouseOutAction(target: any, action: any): void;
    }

    declare enum MUIButtonType {
        MomentaryPushIn = 0,
        PushOnPushOff = 1,
        PushIn = 2,
    }
    declare class MUIButton extends MUIControl {
        target: any;
        action: any;
        type: MUIButtonType;
        initWithLayer(layer: any, owner: any, options?: any): void;
        initWithAction(target: any, action: any): void;
        setAction(target: any, action: any): void;
        setTitle(title: any): void;
        title: any;
        readonly selected: boolean;
        setSelected(value: any): void;
    }

    declare class MUICheckButton extends MUIControl {
        target: any;
        action: any;
        on: boolean;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setOnChangeValue(target: any, action: any): void;
        setOn(on: any): void;
        toggleValue(): void;
    }

    declare class MUISwitchButton extends MUIControl {
        target: any;
        action: any;
        on: boolean;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setOnChangeValue(target: any, action: any): void;
        setOn(on: any): void;
    }

    declare class MUIPopUpButton extends MUIButton {
        initWithLayer(layer: any, owner: any, options?: any): void;
        setMenuAction(target: any, action: any): void;
        addMenuItemWithTitle(title: any): void;
    }

    declare class MUIComboBox extends MUIControl {
        target: any;
        action: any;
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setAllowMultipleSelection(value: any): void;
        layoutSubviews(): void;
        addItem(text: any, value?: any): void;
        addItems(items: any): void;
        removeAllItems(): void;
        getItemAtIndex(index: any): any;
        getSelectedItem(): any;
        getSelectedItemText(): any;
        selectItem(item: any): void;
        setOnChangeAction(target: any, action: any): void;
    }

    declare class MUIMenuItem extends MUIView {
        checked: boolean;
        title: any;
        target: any;
        action: any;
        static itemWithTitle(title: any): MUIMenuItem;
        initWithTitle(title: any): void;
        _setupLayer(): void;
        getWidth(): any;
        getHeight(): any;
    }
    declare class MUIMenu extends MUIView {
        items: any[];
        target: any;
        action: any;
        init(): void;
        _setupLayer(): void;
        addMenuItem(menuItem: any): void;
        removeMenuItem(menuItem: any): void;
        showFromControl(control: any): void;
        hide(): void;
        readonly isVisible: boolean;
        layout(): void;
    }

    declare class MUISegmentedControl extends MUIControl {
        segmentedItems: any[];
        selectedSegmentedIndex: number;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setAction(target: any, action: any): void;
        selectSegmentedAtIndex(index: any): void;
    }

    declare class MUIPageControl extends MUIControl {
        numberOfPages: number;
        initWithLayer(layer: any, owner: any, options?: any): void;
        currentPage: number;
    }

    declare class MUIToolbarButton extends MUIButton {
        static buttonWithLayer(layer: any, owner: any): MUIToolbarButton;
    }
    declare class MUIToolbar extends MUIView {
        buttons: any[];
        initWithLayer(layer: any, owner: any, options?: any): void;
        addToolbarButton(button: any): void;
    }

    declare class MUIViewController extends MIOObject {
        layerID: string;
        view: MUIView;
        parentViewController: any;
        presentingViewController: any;
        presentedViewController: any;
        navigationController: MUINavigationController;
        splitViewController: any;
        tabBarController: any;
        modalPresentationStyle: MUIModalPresentationStyle;
        modalTransitionStyle: MUIModalTransitionStyle;
        transitioningDelegate: any;
        protected _contentSize: MIOSize;
        protected _preferredContentSize: any;
        _outlets: {};
        constructor(layerID?: any);
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        initWithResource(path: any): void;
        localizeSubLayers(layers: any): void;
        localizeLayerIDWithKey(layerID: any, key: any): void;
        loadView(): void;
        _didLoadView(): void;
        protected _loadChildControllers(): void;
        protected _loadChildViewController(index: any, max: any): void;
        protected _setViewLoaded(value: any): void;
        onLoadView(target: any, action: any): void;
        onLoadLayer(target: any, action: any): void;
        readonly viewIsLoaded: boolean;
        readonly childViewControllers: any[];
        addChildViewController(vc: any): void;
        removeChildViewController(vc: any): void;
        readonly isPresented: boolean;
        readonly presentationController: any;
        readonly popoverPresentationController: MUIPopoverPresentationController;
        showViewController(vc: any, animate: any): void;
        presentViewController(vc: MUIViewController, animate: boolean): void;
        dismissViewController(animate: any): void;
        transitionFromViewControllerToViewController(fromVC: any, toVC: any, duration: any, animationType: any, target?: any, completion?: any): void;
        viewDidLoad(): void;
        viewWillAppear(animated?: any): void;
        viewDidAppear(animated?: any): void;
        viewWillDisappear(animated?: any): void;
        viewDidDisappear(animated?: any): void;
        contentHeight(): number;
        setContentSize(size: any): void;
        contentSize: MIOSize;
        preferredContentSize: any;
    }

    declare class MUINavigationController extends MUIViewController {
        rootViewController: any;
        viewControllersStack: any[];
        currentViewControllerIndex: number;
        init(): void;
        initWithRootViewController(vc: any): void;
        setRootViewController(vc: any): void;
        viewWillAppear(animated?: any): void;
        viewDidAppear(animated?: any): void;
        viewWillDisappear(animated?: any): void;
        viewDidDisappear(animated?: any): void;
        pushViewController(vc: any, animated?: any): void;
        popViewController(animated?: any): void;
        popToRootViewController(animated?: any): void;
        readonly preferredContentSize: any;
        animationControllerForPresentedController(presentedViewController: any, presentingViewController: any, sourceController: any): any;
        animationControllerForDismissedController(dismissedController: any): any;
    }
    declare class MUIPushAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any[];
    }
    declare class MUIPopAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any[];
    }

    declare class MUIPageController extends MUIViewController {
        selectedViewControllerIndex: number;
        pageControllersCount: number;
        addPageViewController(vc: any): void;
        protected _loadChildControllers(): void;
        viewWillAppear(animated?: any): void;
        viewDidAppear(animated?: any): void;
        viewWillDisappear(animated?: any): void;
        viewDidDisappear(animated?: any): void;
        showPageAtIndex(index: any): void;
        showNextPage(): void;
        showPrevPage(): void;
        animationControllerForPresentedController(presentedViewController: any, presentingViewController: any, sourceController: any): any;
        animationControllerForDismissedController(dismissedController: any): any;
    }
    declare class MIOPageAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any;
    }

    declare class MUISplitViewController extends MUIViewController {
        init(): void;
        setMasterViewController(vc: any): void;
        setDetailViewController(vc: any): void;
        showDetailViewController(vc: any): void;
        readonly masterViewController: any;
        readonly detailViewController: any;
    }

    declare class MIOTabBarController extends MUIViewController {
        tabBar: any;
        viewDidLoad(): void;
        addTabBarViewController(vc: any): void;
    }

    declare enum MUIAlertViewStyle {
        Default = 0,
    }
    declare enum MUIAlertActionStyle {
        Default = 0,
        Cancel = 1,
        Destructive = 2,
    }
    declare enum MUIAlertItemType {
        None = 0,
        Action = 1,
        TextField = 2,
        ComboBox = 3,
    }
    declare class MUIAlertItem extends MIOObject {
        type: MUIAlertItemType;
        initWithType(type: MUIAlertItemType): void;
    }
    declare class MUIAlertTextField extends MUIAlertItem {
        textField: MUITextField;
        initWithConfigurationHandler(target: any, handler: any): void;
    }
    declare class MUIAlertComboBox extends MUIAlertItem {
        comboBox: MUIComboBox;
        initWithConfigurationHandler(target: any, handler: any): void;
    }
    declare class MUIAlertAction extends MUIAlertItem {
        title: any;
        style: MUIAlertActionStyle;
        target: any;
        completion: any;
        static alertActionWithTitle(title: string, style: MUIAlertActionStyle, target: any, completion: any): MUIAlertAction;
        initWithTitle(title: any, style: any): void;
    }
    declare class MUIAlertViewController extends MUIViewController {
        textFields: any[];
        comboBoxes: any[];
        initWithTitle(title: string, message: string, style: MUIAlertViewStyle): void;
        viewDidLoad(): void;
        viewDidAppear(animated?: any): void;
        viewWillDisappear(animated?: any): void;
        readonly preferredContentSize: MIOSize;
        addAction(action: MUIAlertAction): void;
        addTextFieldWithConfigurationHandler(target: any, handler: any): void;
        addComboBoxWithConfigurationHandler(target: any, handler: any): void;
        addCompletionHandler(target: any, handler: any): void;
        numberOfSections(tableview: any): number;
        numberOfRowsInSection(tableview: any, section: any): number;
        cellAtIndexPath(tableview: any, indexPath: MIOIndexPath): MUITableViewCell;
        heightForRowAtIndexPath(tableView: MUITableView, indexPath: MIOIndexPath): number;
        canSelectCellAtIndexPath(tableview: any, indexPath: MIOIndexPath): boolean;
        didSelectCellAtIndexPath(tableView: any, indexPath: MIOIndexPath): void;
        animationControllerForPresentedController(presentedViewController: any, presentingViewController: any, sourceController: any): any;
        animationControllerForDismissedController(dismissedController: any): any;
    }
    declare class MUIAlertFadeInAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any[];
    }
    declare class MUIAlertFadeOutAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any[];
    }

    declare class MUIWebApplication {
        static sharedInstance(): MUIWebApplication;
        delegate: any;
        isMobile: boolean;
        defaultLanguage: any;
        currentLanguage: any;
        languages: any;
        ready: boolean;
        run(): void;
        setLanguageURL(key: any, url: any): void;
        setDefaultLanguage(key: any): void;
        downloadLanguage(key: any, fn: any): void;
        showModalViewContoller(vc: any): void;
        showMenuFromControl(control: any, menu: any): void;
        hideMenu(): void;
        setPopOverViewController(vc: any): void;
        showPopOverControllerFromRect(vc: any, frame: any): void;
        hidePopOverController(): void;
        addWindow(window: any): void;
        makeKeyWindow(window: any): void;
    }

    declare enum MUICalendarDayCellType {
        Default = 0,
        Custom = 1,
    }
    declare class MUICalendarDayCell extends MUIView {
        type: MUICalendarDayCellType;
        identifier: any;
        weekRow: number;
        readonly date: Date;
        selected: boolean;
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        setDate(date: Date): void;
        setToday(value: boolean): void;
        setSelected(value: boolean): void;
    }
    declare class MUICalendarMonthView extends MUIView {
        readonly month: any;
        readonly year: any;
        firstDate: any;
        lastDate: any;
        cellSpacingX: number;
        cellSpacingY: number;
        initWithMonth(month: any, year: any, delegate: any): void;
        setMonth(month: any, year: any): void;
        layoutSubviews(): void;
    }
    declare class MUICalendarView extends MUIScrollView {
        dataSource: any;
        delegate: any;
        minDate: Date;
        maxDate: Date;
        horizontalCellSpacing: number;
        verticalCellSpacing: number;
        selectedDate: any;
        readonly today: Date;
        init(): void;
        initWithLayer(layer: any, owner: any, options?: any): void;
        _reuseDayCell(cell: any, identifier?: string): void;
        cellDayAtDate(date: any): any;
        dequeueReusableDayCellWithIdentifier(identifier?: string): any;
        reloadData(): void;
        layoutSubviews(): void;
        observeValueForKeyPath(key: any, type: any, object: any): void;
        scrollToDate(date: Date): void;
        deselectCellAtDate(date: Date): void;
    }
    declare function MIOCalendarGetStringFromDate(date: any): string;

    declare class MUIDatePickerController extends MUIViewController {
        delegate: any;
        viewDidLoad(): void;
        viewTitleForHeaderAtMonthForCalendar(calendar: any, currentMonth: any): MUILabel;
        dayCellAtDate(calendar: any, date: any): any;
        didSelectDayCellAtDate(calendarView: any, date: any): void;
        readonly preferredContentSize: MIOSize;
    }

    declare enum MUIChartViewType {
        Bar = 0,
        HorizontalBar = 1,
        Line = 2,
        Pie = 3,
    }
    declare class MUIChartView extends MUIView {
        title: string;
        backgroundChartColors: string[];
        borderChartColors: string[];
        labels: any;
        values: any;
        initWithLayer(layer: any, owner: any, options?: any): void;
        renderWithType(type: MUIChartViewType): void;
        clear(): void;
    }

    declare class MUIReportViewController extends MUIViewController {
    }

    declare enum MUIReportTableViewCellType {
        Custom = 0,
        Label = 1,
        Combox = 2,
    }
    declare class MUIReportTableViewCell extends MUIView {
        type: MUIReportTableViewCellType;
        label: MUILabel;
        initWithLayer(layer: any, owner: any, options: any): void;
    }
    declare class MUIReportTableViewRow extends MIOObject {
        cells: any[];
        y: number;
        height: number;
        removeFromSuperview(): void;
    }
    declare class MUIReportTableViewColumn extends MIOObject {
        static labelColumnWithTitle(title: string, width: any, minWidth: any, alignment: any, key?: any, formatter?: MIOFormatter, identifer?: string): MUIReportTableViewColumn;
        identifier: string;
        title: string;
        width: number;
        minWidth: number;
        serverName: string;
        pixelWidth: number;
        alignment: string;
        formatter: MIOFormatter;
        ascending: boolean;
        _target: any;
        _onHeaderClickFn: any;
        columnHeaderView(): MUIView;
        removeFromSuperview(): void;
    }
    declare class MUIReportTableView extends MUIScrollView {
        dataSource: any;
        delegate: any;
        columns: any[];
        selectedIndexPath: any;
        initWithLayer(layer: any, owner: any, options?: any): void;
        addColumn(column: MUIReportTableViewColumn): void;
        removeAllColumns(): void;
        dequeueReusableCellWithIdentifier(identifier: string): any;
        reloadData(): void;
        layoutSubviews(): void;
        onHeaderClickFn(col: MUIReportTableViewColumn): void;
        cellOnClickFn(cell: any): void;
    }

    declare interface Window {
        prototype: any;
    }
    declare function MUIOutletRegister(owner: any, layerID: any, c: any): void;
    declare function MUIOutletQuery(owner: any, layerID: any): any;
    declare function MUIOutlet(owner: any, elementID: any, className?: any, options?: any): any;
    declare function MUIWindowSize(): MIOSize;
    declare function _MIUShowViewController(fromVC: any, toVC: any, sourceVC: any, target?: any, completion?: any): void;
    declare function _MUIHideViewController(fromVC: any, toVC: any, sourceVC: any, target?: any, completion?: any): void;
    declare function _MUITransitionFromViewControllerToViewController(fromVC: any, toVC: any, sourceVC: any, target?: any, completion?: any): void;

    declare enum MUIAnimationType {
        None = 0,
        BeginSheet = 1,
        EndSheet = 2,
        Push = 3,
        Pop = 4,
        FlipLeft = 5,
        FlipRight = 6,
        FadeIn = 7,
        FadeOut = 8,
        LightSpeedIn = 9,
        LightSpeedOut = 10,
        Hinge = 11,
        SlideInUp = 12,
        SlideOutDown = 13,
        HorizontalOutFlip = 14,
        HorizontalInFlip = 15,
    }
    declare function MUIClassListForAnimationType(type: any): any[];
    declare function _MUIAddAnimations(layer: any, animations: any): void;
    declare function _MUIRemoveAnimations(layer: any, animations: any): void;
    declare function _MUIAnimationStart(layer: any, animationController: any, animationContext: any, target?: any, completion?: any): void;
    declare function _MUIAnimationDidFinish(event: any): void;

    declare var _MUICoreLayerIDCount: number;
    declare function MUICoreLayerIDFromObject(object: any): string;
    declare function MUICoreLayerIDFromClassname(classname: string): string;
    declare function MUICoreLayerCreate(layerID?: any): HTMLElement;
    declare function MUICoreLayerCreateWithStyle(style: any, layerID?: any): HTMLElement;
    declare function MUICoreLayerAddStyle(layer: any, style: any): void;
    declare function MUICoreLayerRemoveStyle(layer: any, style: any): void;

    declare class MUIActivityIndicator extends MUIView {
    }

    declare function MIOEdgeInsetsMake(top: any, left: any, bottom: any, rigth: any): MUIEdgeInsets;
    declare class MUIEdgeInsets extends MIOObject {
        top: number;
        left: number;
        bottom: number;
        right: number;
        static Zero(): MUIEdgeInsets;
        initWithValues(top: any, left: any, bottom: any, right: any): void;
    }

    declare enum MUIPopoverArrowDirection {
        Any = 0,
        Up = 1,
        Down = 2,
        Left = 3,
        Right = 4,
    }
    declare class MUIPopoverPresentationController extends MUIPresentationController {
        permittedArrowDirections: MUIPopoverArrowDirection;
        sourceView: any;
        sourceRect: MIORect;
        delegate: any;
        readonly transitioningDelegate: any;
        presentationTransitionWillBegin(): void;
        _calculateFrame(): void;
    }
    declare class MIOModalPopOverTransitioningDelegate extends MIOObject {
        modalTransitionStyle: any;
        animationControllerForPresentedController(presentedViewController: any, presentingViewController: any, sourceController: any): any;
        animationControllerForDismissedController(dismissedController: any): any;
    }
    declare class MIOPopOverPresentAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any[];
    }
    declare class MIOPopOverDismissAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any[];
    }

    declare enum MUIModalPresentationStyle {
        FullScreen = 0,
        PageSheet = 1,
        FormSheet = 2,
        CurrentContext = 3,
        Custom = 4,
        OverFullScreen = 5,
        OverCurrentContext = 6,
        Popover = 7,
        None = 8,
    }
    declare enum MUIModalTransitionStyle {
        CoverVertical = 0,
        FlipHorizontal = 1,
        CrossDisolve = 2,
    }
    declare class MUIPresentationController extends MIOObject {
        presentationStyle: MUIModalPresentationStyle;
        shouldPresentInFullscreen: boolean;
        protected _presentedViewController: MUIViewController;
        presentingViewController: any;
        presentedView: any;
        protected _transitioningDelegate: any;
        isPresented: boolean;
        initWithPresentedViewControllerAndPresentingViewController(presentedViewController: any, presentingViewController: any): void;
        setPresentedViewController(vc: MUIViewController): void;
        presentedViewController: MUIViewController;
        readonly transitioningDelegate: any;
        presentationTransitionWillBegin(): void;
        _calculateFrame(): void;
        presentationTransitionDidEnd(completed: any): void;
        dismissalTransitionWillBegin(): void;
        dismissalTransitionDidEnd(completed: any): void;
        window: MUIWindow;
        observeValueForKeyPath(key: any, type: any, object: any): void;
    }
    declare class MIOModalTransitioningDelegate extends MIOObject {
        modalTransitionStyle: any;
        animationControllerForPresentedController(presentedViewController: any, presentingViewController: any, sourceController: any): any;
        animationControllerForDismissedController(dismissedController: any): any;
    }
    declare class MIOAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any;
    }
    declare class MIOModalPresentAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any;
    }
    declare class MIOModalDismissAnimationController extends MIOObject {
        transitionDuration(transitionContext: any): number;
        animateTransition(transitionContext: any): void;
        animationEnded(transitionCompleted: any): void;
        animations(transitionContext: any): any;
    }

    declare class MWSJSONRequest extends MWSRequest {
        willStart(): void;
        didFinish(): void;
    }

    declare class MWSPersistenStoreOperation extends MIOOperation {
        saveCount: number;
        request: MWSJSONRequest;
        dependencyIDs: any;
        responseCode: any;
        responseJSON: any;
        initWithDelegate(delegate: any): void;
        start(): void;
        executing(): boolean;
        finished(): boolean;
    }

    declare let MWSPersistentStoreDidChangeEntityStatus: string;
    declare enum MWSPersistentStoreFetchStatus {
        None = 0,
        Downloading = 1,
        Downloaded = 2,
    }
    declare enum MWSPersistentStoreRequestType {
        Fetch = 0,
        Insert = 1,
        Update = 2,
        Delete = 3,
    }
    declare enum MWSPersistentStoreError {
        NoStoreURL = 0,
        InvalidRequest = 1,
    }
    declare class MWSPersistentStore extends MIOIncrementalStore {
        static readonly type: string;
        readonly type: string;
        delegate: any;
        loadMetadata(): MIOError;
        executeRequest(request: MIOPersistentStoreRequest, context: MIOManagedObjectContext): any[];
        newValuesForObjectWithID(objectID: MIOManagedObjectID, context: MIOManagedObjectContext): MIOIncrementalStoreNode;
        newValueForRelationship(relationship: MIORelationshipDescription, objectID: MIOManagedObjectID, context?: MIOManagedObjectContext): any;
        obtainPermanentIDsForObjects(objects: any): any[];
        managedObjectContextDidRegisterObjectsWithIDs(objectIDs: any): void;
        managedObjectContextDidUnregisterObjectsWithIDs(objectIDs: any): void;
        _fetchObjectWithObjectID(objectID: MIOManagedObjectID, context: MIOManagedObjectContext): void;
        fetchObjects(fetchRequest: MIOFetchRequest, context: MIOManagedObjectContext, target?: any, completion?: any): void;
        insertObjectToServer(object: MIOManagedObject): void;
        deleteObjectOnServer(object: MIOManagedObject): void;
        operationAtServerID(serverID: string, saveCount: any): any;
    }

    declare class MWSRequest extends MIOObject {
        url: MIOURL;
        httpMethod: string;
        body: any;
        bodyData: any;
        resultCode: number;
        resultData: any;
        initWithURL(url: MIOURL, body?: any, httpMethod?: string): void;
        setHeaderValue(value: string, key: string): void;
        send(target: any, completion?: any): void;
        protected willStart(): void;
        protected didFinish(): void;
    }

//Implemented in: MIOCore/MIOArray.ts
declare interface Array<T> {
    addObject(object);
    removeObject(object);
    removeObjectAtIndex(index);
    objectAtIndex(index);
    indexOfObject(object);
    containsObject(object):boolean;
    count();
    firstObject();
    lastObject();
}

//Implemented in: MIOCore/MIOString.ts
declare interface String {
    stringByAppendingPathComponent(path:string):string;
    
    lastPathComponent():string;    
    stringByDeletingLastPathComponent():string;

    hasPreffix(preffix:string):boolean;
    hasSuffix(suffix:string):boolean;
}